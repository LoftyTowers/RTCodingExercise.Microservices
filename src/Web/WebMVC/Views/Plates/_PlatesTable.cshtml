@model RTCodingExercise.Microservices.Models.PlateDataViewModel

@{
    int currentPage = ViewBag.CurrentPage ?? 1;
    int totalPages = ViewBag.TotalPages ?? 1;
    int pageSize = ViewBag.PageSize ?? 20;

    var currentField = ViewBag.CurrentSortField ?? WebMVC.Enums.SortField.None;
    var currentDirection = ViewBag.CurrentSortDirection ?? WebMVC.Enums.SortDirection.Ascending;
    var query = ViewBag.Query ?? "";
    var onlyAvailable = ViewBag.OnlyAvailable ?? false;

    Func<WebMVC.Enums.SortField, WebMVC.Enums.SortDirection> nextDirection = field =>
        field == currentField && currentDirection == WebMVC.Enums.SortDirection.Ascending
            ? WebMVC.Enums.SortDirection.Descending
            : WebMVC.Enums.SortDirection.Ascending;

    string routeName = !string.IsNullOrWhiteSpace(query) || onlyAvailable ? "Filter" : "Index";
}

<table class="table table-striped table-bordered w-auto">
    <thead>
        <tr>
            <th>#</th>
            <th>
                <a asp-action="@routeName" asp-route-field="Registration" asp-route-direction="@nextDirection(WebMVC.Enums.SortField.Registration)"
                   asp-route-page="@currentPage" asp-route-pageSize="@pageSize" asp-route-query="@query" asp-route-onlyAvailable="@onlyAvailable">
                    Registration
                    @if (currentField == WebMVC.Enums.SortField.Registration)
                    {
                        <i class="bi @(currentDirection == WebMVC.Enums.SortDirection.Ascending ? "bi-caret-up-fill" : "bi-caret-down-fill") ms-1"></i>
                    }
                </a>
            </th>
            <th>
                <a asp-action="@routeName" asp-route-field="PurchasePrice" asp-route-direction="@nextDirection(WebMVC.Enums.SortField.PurchasePrice)"
                   asp-route-page="@currentPage" asp-route-pageSize="@pageSize" asp-route-query="@query" asp-route-onlyAvailable="@onlyAvailable">
                    Purchase Price
                    @if (currentField == WebMVC.Enums.SortField.PurchasePrice)
                    {
                        <i class="bi @(currentDirection == WebMVC.Enums.SortDirection.Ascending ? "bi-caret-up-fill" : "bi-caret-down-fill") ms-1"></i>
                    }
                </a>
            </th>
            <th>
                <a asp-action="@routeName" asp-route-field="SalePrice" asp-route-direction="@nextDirection(WebMVC.Enums.SortField.SalePrice)"
                   asp-route-page="@currentPage" asp-route-pageSize="@pageSize" asp-route-query="@query" asp-route-onlyAvailable="@onlyAvailable">
                    Sale Price
                    @if (currentField == WebMVC.Enums.SortField.SalePrice)
                    {
                        <i class="bi @(currentDirection == WebMVC.Enums.SortDirection.Ascending ? "bi-caret-up-fill" : "bi-caret-down-fill") ms-1"></i>
                    }
                </a>
            </th>
            <th>FinalSalePrice</th>
            <th>PromoCodeUsed</th>
            <th>Status</th>
            <th>Update</th>
        </tr>
    </thead>
    <tbody>
        @{
            int rowNumber = ((currentPage - 1) * pageSize) + 1;
        }
        @foreach (var plate in Model.Plates)
        {
            <tr>
                <td>@rowNumber</td>
                <td>@plate.Registration</td>
                <td>@plate.PurchasePrice.ToString("C")</td>
                <td>@plate.SalePrice.ToString("C")</td>
                <td>@(plate.FinalSalePrice?.ToString("C") ?? "")</td>
                <td>@plate.PromoCodeUsed</td>
                <td>@plate.Status</td>
                <td>
                    <form method="post" class="d-flex align-items-center plate-status-form">
                        <input type="hidden" name="Id" value="@plate.Id" />
                        <input type="hidden" name="Registration" value="@plate.Registration" />
                        <input type="hidden" name="PurchasePrice" value="@plate.PurchasePrice" />
                        <input type="hidden" name="SalePrice" value="@plate.SalePrice" />
                        <input type="hidden" name="FinalSalePrice" value="@plate.FinalSalePrice" />
                        <input type="hidden" name="SalePriceToDisplay" value="@plate.SalePriceToDisplay" />

                        <select class="form-select me-2"
                                name="Status"
                                data-original-status="@((int)plate.Status)"
                                onchange="handleStatusChange(this)">
                            <option value="10" selected="@(plate.Status == WebMVC.Enums.Status.Available)">Available</option>
                            <option value="20" selected="@(plate.Status == WebMVC.Enums.Status.Reserved)">Reserved</option>
                            <option value="30" selected="@(plate.Status == WebMVC.Enums.Status.Sold)">Sold</option>
                        </select>
                    </form>
                </td>
            </tr>
            rowNumber++;
        }
    </tbody>
</table>

<!-- Pagination -->
@{
    int startPage = Math.Max(1, currentPage - 2);
    int endPage = Math.Min(totalPages, startPage + 4);
    if (endPage - startPage < 4) startPage = Math.Max(1, endPage - 4);
}

<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">

        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="@Url.Action(routeName, new {
                page = 1,
                pageSize,
                query,
                onlyAvailable,
                field = currentField,
                direction = currentDirection
            })">&laquo;&laquo;</a>
        </li>

        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="@Url.Action(routeName, new {
                page = currentPage - 1,
                pageSize,
                query,
                onlyAvailable,
                field = currentField,
                direction = currentDirection
            })">&laquo;</a>
        </li>

        @for (int i = startPage; i <= endPage; i++)
        {
            <li class="page-item @(i == currentPage ? "active" : "")">
                <a class="page-link" href="@Url.Action(routeName, new {
                    page = i,
                    pageSize,
                    query,
                    onlyAvailable,
                    field = currentField,
                    direction = currentDirection
                })">@i</a>
            </li>
        }

        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
            <a class="page-link" href="@Url.Action(routeName, new {
                page = currentPage + 1,
                pageSize,
                query,
                onlyAvailable,
                field = currentField,
                direction = currentDirection
            })">&raquo;</a>
        </li>

        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
            <a class="page-link" href="@Url.Action(routeName, new {
                page = totalPages,
                pageSize,
                query,
                onlyAvailable,
                field = currentField,
                direction = currentDirection
            })">&raquo;&raquo;</a>
        </li>

    </ul>
</nav>

